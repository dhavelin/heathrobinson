/* Services */

angular.module('heathRobinson').

  constant('settings', {

    // The gap between the end of a tape and the start, in characters
    tapeGap: 0,

    // The width of a tape in pixels
    tapeWidth: 121

  }).

  service('initialData', function() {

    // The encoded text
    this.cipher = '+OHMO8WNAQYIIKYMBFWI+E/QVGXN+4JAB9ZXCNR4LPO/VUT3PGKR3ZJDU/ECU9FPSF9DQAHLCTZVL8RSY8XJ4G3KAW4EMTDB9SH/E';

    // Key stream generated by the cipher machine
    this.key = 'MPLQZMGJWRXNIATSFBRSJRCO4I8/IXXNW3FUGA3KO9ZT+4ABU8H//Y4KFQLVEZVDGWEK+JYVYM4+DQ9EEHC/9PSTNUHB3LO8DPCA';

  }).

  service('converters', function() {

    var bits = {
      '/': [false, false, false, false, false], // null
      '9': [false, false, true, false, false], // space
      'Q': [true, false, true, true, true],
      'W': [true, false, false, true, true],
      'E': [false, false, false, false, true],
      'R': [false, true, false, true, false],
      'T': [true, false, false, false, false],
      'Y': [true, false, true, false, true],
      'U': [false, false, true, true, true],
      'I': [false, false, true, true, false],
      'O': [true, true, false, false, false],
      'P': [true, false, true, true, false],
      'A': [false, false, false, true, true],
      'S': [false, false, true, false, true],
      'D': [false, true, false, false, true],
      'F': [false, true, true, false, true],
      'G': [true, true, false, true, false],
      'H': [true, false, true, false, false],
      'J': [false, true, false, true, true],
      'K': [false, true, true, true, true],
      'L': [true, false, false, true, false],
      'Z': [true, false, false, false, true],
      'X': [true, true, true, false, true],
      'C': [false, true, true, true, false],
      'V': [true, true, true, true, false],
      'B': [true, true, false, false, true],
      'N': [false, true, true, false, false],
      'M': [true, true, true, false, false],
      '3': [false, true, false, false, false], // carriage return
      '4': [false, false, false, true, false], // line feed
      '+': [true, true, false, true, true], // shift to figures
      '8': [true, true, true, true, true] // shift to letters
    };

    this.char2bits = function(ttyChar) {
      var aFromChar = bits[ttyChar];

      if (aFromChar) {
        return aFromChar;
      } else {
        throw new TypeError('[char2bits2] Invalid teletype character: ' + ttyChar);
      }

    };

    this.char2print = function(chars) {
      var converted = [];
      var charString;
      var bits = [];
      for (var i = 0; i < chars.length; i++) {
        bits = this.char2bits(chars[i]);
        charString = '';
        for (var j = 0; j < 5; j++) {
          charString += bits[j] ? 'X' : '\u2022';
          if (j < 4) {
            charString += ' ';
          }
        }
        converted.push(charString);
      }
      return converted;
    };

  });