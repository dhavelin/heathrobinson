/* Services */

angular.module('heathRobinson').

  constant('settings', {

    // The gap between the end of a tape and the start, in characters
    tapeGap: 0,

    // The width of a tape in pixels
    tapeWidth: 121

  }).

  service('initialData', function() {

    // The encoded text
    this.cipher = '+OHMO8WNAQYIIKYMBFWI+E/QVGXN+4JAB9ZXCNR4LPO/VUT3PGKR3ZJDU/ECU9FPSF9DQAHLCTZVL8RSY8XJ4G3KAW4EMTDB9SH/E';

    // Key stream generated by the cipher machine
    this.key = 'MPLQZMGJWRXNIATSFBRSJRCO4I8/IXXNW3FUGA3KO9ZT+4ABU8H//Y4KFQLVEZVDGWEK+JYVYM4+DQ9EEHC/9PSTNUHB3LO8DPCA';

  }).

  service('converters', function() {

    var bits = {
      '/': {
              bits: [false, false, false, false, false],
              binary: 0
           }, // null
      'E': {
              bits: [false, false, false, false, true],
              binary: 1
            },
      '4': {
              bits: [false, false, false, true, false],
              binary: 2
           }, // line feed
      'A': {
              bits: [false, false, false, true, true],
              binary: 3
           },
      '9': {
              bits: [false, false, true, false, false],
              binary: 4
           }, // space
      'S': {
              bits: [false, false, true, false, true],
              binary: 5
           },
      'I': {
              bits: [false, false, true, true, false],
              binary: 6
           },
      'U': {
              bits: [false, false, true, true, true],
              binary: 7
           },
      '3': {
              bits: [false, true, false, false, false],
              binary: 8
           }, // carriage return
      'D': {
              bits: [false, true, false, false, true],
              binary: 9
           },
      'R': {
              bits: [false, true, false, true, false],
              binary: 10
           },
      'J': {
              bits: [false, true, false, true, true],
              binary: 11
           },
      'N': {
              bits: [false, true, true, false, false],
              binary: 12
           },
      'F': {
              bits: [false, true, true, false, true],
              binary: 13
           },
      'C': {
              bits: [false, true, true, true, false],
              binary: 14
           },
      'K': {
              bits: [false, true, true, true, true],
              binary: 15
           },
      'T': {
              bits: [true, false, false, false, false],
              binary: 16
           },
      'Z': {
              bits: [true, false, false, false, true],
              binary: 17
           },
      'L': {
              bits: [true, false, false, true, false],
              binary: 18
           },
      'W': {
              bits: [true, false, false, true, true],
              binary: 19
           },
      'H': {
              bits: [true, false, true, false, false],
              binary: 20
           },
      'Y': {
              bits: [true, false, true, false, true],
              binary: 21
           },
      'P': {
              bits: [true, false, true, true, false],
              binary: 22
           },
      'Q': {
              bits: [true, false, true, true, true],
              binary: 23
           },
      'O': {
              bits: [true, true, false, false, false],
              binary: 24
           },
      'B': {
              bits: [true, true, false, false, true],
              binary: 25
           },
      'G': {
              bits: [true, true, false, true, false],
              binary: 26
           },
      '+': {
              bits: [true, true, false, true, true],
              binary: 27
           }, // shift to figures
      'M': {
              bits: [true, true, true, false, false],
              binary: 28
           },
      'X': {
              bits: [true, true, true, false, true],
              binary: 29
           },
      'V': {
              bits: [true, true, true, true, false],
              binary: 30
           },
      '8': {
              bits: [true, true, true, true, true],
              binary: 31
           }, // shift to letters
    };

    this.char2bits = function(ttyChar) {
      var aFromChar = bits[ttyChar].bits;

      if (aFromChar) {
        return aFromChar;
      } else {
        throw new TypeError('[char2bits2] Invalid teletype character: ' + ttyChar);
      }

    };

    this.chars2print = function(chars) {
      var converted = [];
      var charString;
      var tf = [];
      for (var i = 0; i < chars.length; i++) {
        tf = this.char2bits(chars[i]);
        charString = '';
        for (var j = 0; j < 5; j++) {
          charString += tf[j] ? 'X' : '\u2022';
          if (j < 4) {
            charString += ' ';
          }
        }
        converted.push(charString);
      }
      return converted;
    };

    this.chars2binary = function(chars) {
      var converted = [];
      for (var i = 0; i < chars.length; i++) {
        converted.push(bits[chars[i]].binary);
      }
      return converted;
    };

  });